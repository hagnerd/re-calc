// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CalcRegex$ReCalc = require("./CalcRegex.bs.js");

function get_first_occurence(pattern, input, start, length) {
  var param = input.match(pattern);
  if (param !== null) {
    return $$Array.sub(param, start, length);
  } else {
    return /* array */[];
  }
}

function get_first_mult_or_div(input) {
  var res = get_first_occurence(CalcRegex$ReCalc.first_mult_or_div_group, input, 1, 3);
  var operator = Caml_array.caml_array_get(res, 1);
  var num1 = Caml_array.caml_array_get(res, 0);
  var num2 = Caml_array.caml_array_get(res, 2);
  return /* tuple */[
          operator,
          num1,
          num2
        ];
}

function get_first_add_or_sub(input) {
  var res = get_first_occurence(CalcRegex$ReCalc.first_add_or_sub_group, input, 1, 3);
  var operator = Caml_array.caml_array_get(res, 1);
  var num1 = Caml_array.caml_array_get(res, 0);
  var num2 = Caml_array.caml_array_get(res, 2);
  return /* tuple */[
          operator,
          num1,
          num2
        ];
}

function construct_replacer(operator, n1, n2) {
  return new RegExp("" + (String(n1) + ("\\" + (String(operator) + ("" + (String(n2) + ""))))));
}

function has_operator(input) {
  return CalcRegex$ReCalc.operators.test(input);
}

function has_mult_or_div(input) {
  return CalcRegex$ReCalc.mult_or_div.test(input);
}

function has_add_or_sub(input) {
  return CalcRegex$ReCalc.add_or_sub.test(input);
}

function format_result(input) {
  var is_whole_num = input % 1.0 === 0.0;
  if (is_whole_num) {
    return input.toString();
  } else {
    return input.toPrecision();
  }
}

function has_div_by_zero(input) {
  var param = input.match(CalcRegex$ReCalc.division_group);
  var result = param !== null ? param : /* array */[];
  var denominator = Caml_array.caml_array_get(result, 3);
  return Caml_format.caml_float_of_string(denominator) === 0.0;
}

exports.get_first_mult_or_div = get_first_mult_or_div;
exports.get_first_add_or_sub = get_first_add_or_sub;
exports.construct_replacer = construct_replacer;
exports.has_operator = has_operator;
exports.has_mult_or_div = has_mult_or_div;
exports.has_add_or_sub = has_add_or_sub;
exports.has_div_by_zero = has_div_by_zero;
exports.format_result = format_result;
/* CalcRegex-ReCalc Not a pure module */
