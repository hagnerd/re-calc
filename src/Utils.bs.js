// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var CalcRegex$ReCalc = require("./CalcRegex.bs.js");

function isNumKey(key) {
  switch (key) {
    case "0" : 
    case "1" : 
    case "2" : 
    case "3" : 
    case "4" : 
    case "5" : 
    case "6" : 
    case "7" : 
    case "8" : 
    case "9" : 
        return true;
    default:
      return false;
  }
}

function isOpKey(key) {
  switch (key) {
    case "*" : 
    case "+" : 
    case "-" : 
    case "/" : 
        return true;
    default:
      return false;
  }
}

function getLastNum(input) {
  var nums = input.split(CalcRegex$ReCalc.operators);
  if (nums.length !== 0) {
    var match = Caml_array.caml_array_get(nums, nums.length - 1 | 0);
    if (match !== undefined) {
      var num = match;
      if (CalcRegex$ReCalc.has_number.test(num)) {
        return num;
      } else {
        return "";
      }
    } else {
      return "";
    }
  } else {
    return "";
  }
}

function lastGroupIsOpKey(input) {
  var chars = List.filter((function (a) {
            return a !== "";
          }))($$Array.to_list(input.split("")));
  return isOpKey(List.nth(chars, List.length(chars) - 1 | 0));
}

exports.isNumKey = isNumKey;
exports.isOpKey = isOpKey;
exports.getLastNum = getLastNum;
exports.lastGroupIsOpKey = lastGroupIsOpKey;
/* CalcRegex-ReCalc Not a pure module */
