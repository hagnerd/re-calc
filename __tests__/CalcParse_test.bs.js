// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var CalcParse$ReCalc = require("../src/CalcParse.bs.js");

Jest.describe("get_first_mult_or_div", (function (param) {
        Jest.test("it should return the first multiplication group", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.get_first_mult_or_div("1+2*3/4")), /* tuple */[
                            "*",
                            "2",
                            "3"
                          ]);
              }));
        return Jest.test("it should returnt the first division group", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.get_first_mult_or_div("1+2/3*4")), /* tuple */[
                                  "/",
                                  "2",
                                  "3"
                                ]);
                    }));
      }));

Jest.describe("get_first_add_or_sub", (function (param) {
        Jest.test("it should return the first addition group", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.get_first_add_or_sub("1*2+3-4")), /* tuple */[
                            "+",
                            "2",
                            "3"
                          ]);
              }));
        return Jest.test("it should return the first subtraction group", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.get_first_add_or_sub("1*2-3+4")), /* tuple */[
                                  "-",
                                  "2",
                                  "3"
                                ]);
                    }));
      }));

Jest.describe("construct_replacer", (function (param) {
        return Jest.test("it should construct correctly", (function (param) {
                      var replacer = CalcParse$ReCalc.construct_replacer("*", "2", "4");
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](replacer), (/2\*4/));
                    }));
      }));

Jest.describe("has_operator", (function (param) {
        Jest.test("it should return true when operator is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_operator("2*3+1-2/5")), true);
              }));
        return Jest.test("it should return false when operator isn't present", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_operator("23125")), false);
                    }));
      }));

Jest.describe("has_add_or_sub", (function (param) {
        Jest.test("it should return true when input has + operator", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_add_or_sub("2+3")), true);
              }));
        Jest.test("it should return true when input has - operator", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_add_or_sub("2-3")), true);
              }));
        Jest.test("it should return true when input has multiple +/- operators", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_add_or_sub("2-3+4-1")), true);
              }));
        return Jest.test("it should return false when input has no +/- operators", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_add_or_sub("2*3/4*1")), false);
                    }));
      }));

Jest.describe("has_mult_or_div", (function (param) {
        Jest.test("it should return true when * is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_mult_or_div("2*3")), true);
              }));
        Jest.test("it should return true when / is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_mult_or_div("2/3")), true);
              }));
        Jest.test("it should return true when * and / is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_mult_or_div("2*4/3")), true);
              }));
        return Jest.test("it should return false when * and / are not present", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_mult_or_div("2+3-4")), false);
                    }));
      }));

Jest.describe("format_result", (function (param) {
        Jest.test("it should format number with decimal", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.format_result(3.100)), "3.1");
              }));
        return Jest.test("it should format whole number", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.format_result(3.0)), "3");
                    }));
      }));

Jest.describe("has_div_by_zero", (function (param) {
        Jest.test("it should return true when divide by zero is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_div_by_zero("1+2*3/0")), true);
              }));
        return Jest.test("it should return false when divide by zero is not present", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcParse$ReCalc.has_div_by_zero("1/2")), false);
                    }));
      }));

/*  Not a pure module */
