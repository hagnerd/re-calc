// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Utils$ReCalc = require("./Utils.bs.js");
var Button$ReCalc = require("./components/Button.bs.js");
var Display$ReCalc = require("./components/Display.bs.js");
var CalcMath$ReCalc = require("./CalcMath.bs.js");
var NumButtons$ReCalc = require("./components/NumButtons.bs.js");
var DisplayError$ReCalc = require("./component/DisplayError.bs.js");
var OperatorButtons$ReCalc = require("./components/OperatorButtons.bs.js");

var initialState = /* record */[
  /* display */"",
  /* error */undefined
];

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* record */[
              /* display */"",
              /* error */undefined
            ];
    } else if (state[/* display */0] === "") {
      return /* record */[
              /* display */state[/* display */0],
              /* error */"Nothing to\n      calculate"
            ];
    } else if (Utils$ReCalc.lastGroupIsOpKey(state[/* display */0])) {
      return /* record */[
              /* display */state[/* display */0],
              /* error */"Cannot compute with dangling operator"
            ];
    } else {
      var result = CalcMath$ReCalc.calculate(/* Ok */Block.__(0, [state[/* display */0]]));
      if (result.tag) {
        return /* record */[
                /* display */state[/* display */0],
                /* error */result[0]
              ];
      } else {
        return /* record */[
                /* display */result[0],
                /* error */undefined
              ];
      }
    }
  } else {
    var s = action[0];
    if (s === "." && Utils$ReCalc.lastGroupIsOpKey(state[/* display */0])) {
      return /* record */[
              /* display */state[/* display */0],
              /* error */"Cannot make " + (s + " a decimal")
            ];
    } else if (s === ".") {
      var last = Utils$ReCalc.getLastNum(state[/* display */0]);
      if (last !== "" && !last.includes(".")) {
        return /* record */[
                /* display */state[/* display */0] + s,
                /* error */undefined
              ];
      } else {
        return /* record */[
                /* display */state[/* display */0],
                /* error */"Number is already a decimal"
              ];
      }
    } else if (Utils$ReCalc.isOpKey(s) && state[/* display */0] === "") {
      return state;
    } else if (Utils$ReCalc.isOpKey(s)) {
      if (Utils$ReCalc.lastGroupIsOpKey(state[/* display */0])) {
        return /* record */[
                /* display */state[/* display */0],
                /* error */"Cannot have two operators in a row"
              ];
      } else {
        return /* record */[
                /* display */state[/* display */0] + s,
                /* error */undefined
              ];
      }
    } else {
      return /* record */[
              /* display */state[/* display */0] + s,
              /* error */undefined
            ];
    }
  }
}

function useListener($$event, callback) {
  React.useEffect((function () {
          addEventListener($$event, callback);
          return (function (param) {
                    removeEventListener($$event, callback);
                    return /* () */0;
                  });
        }), ([]));
  return /* () */0;
}

function listen(dispatch, $$event) {
  console.log($$event.key);
  var x = $$event.key;
  if (Utils$ReCalc.isNumKey(x) || Utils$ReCalc.isOpKey(x) || x === ".") {
    return Curry._1(dispatch, /* AddToDisplay */[x]);
  } else if (x === "=") {
    return Curry._1(dispatch, /* Compute */0);
  } else {
    return /* () */0;
  }
}

function Main$App(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  useListener("keypress", (function (param) {
          return listen(dispatch, param);
        }));
  return React.createElement(React.Fragment, undefined, React.createElement(Display$ReCalc.make, {
                  text: state[/* display */0]
                }), React.createElement(DisplayError$ReCalc.make, {
                  error: state[/* error */1]
                }), React.createElement(NumButtons$ReCalc.make, {
                  handleClick: (function (n) {
                      return Curry._1(dispatch, /* AddToDisplay */[n]);
                    })
                }), React.createElement(OperatorButtons$ReCalc.make, {
                  handleClick: (function (op) {
                      return Curry._1(dispatch, /* AddToDisplay */[op]);
                    })
                }), React.createElement(Button$ReCalc.make, {
                  handleClick: (function (param) {
                      return Curry._1(dispatch, /* ClearDisplay */1);
                    }),
                  children: "Clear"
                }), React.createElement(Button$ReCalc.make, {
                  handleClick: (function (param) {
                      return Curry._1(dispatch, /* Compute */0);
                    }),
                  children: "="
                }));
}

var App = /* module */[
  /* initialState */initialState,
  /* reducer */reducer,
  /* useListener */useListener,
  /* listen */listen,
  /* make */Main$App
];

ReactDOMRe.renderToElementWithId(React.createElement(Main$App, { }), "app");

exports.App = App;
/*  Not a pure module */
