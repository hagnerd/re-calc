// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils$ReCalc = require("../src/Utils.bs.js");

Jest.describe("isNum", (function (param) {
        Jest.test("it should return true when a number is given", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](/* :: */[
                                Utils$ReCalc.isNumKey("0"),
                                /* :: */[
                                  Utils$ReCalc.isNumKey("1"),
                                  /* :: */[
                                    Utils$ReCalc.isNumKey("2"),
                                    /* :: */[
                                      Utils$ReCalc.isNumKey("3"),
                                      /* :: */[
                                        Utils$ReCalc.isNumKey("4"),
                                        /* :: */[
                                          Utils$ReCalc.isNumKey("5"),
                                          /* :: */[
                                            Utils$ReCalc.isNumKey("6"),
                                            /* :: */[
                                              Utils$ReCalc.isNumKey("7"),
                                              /* :: */[
                                                Utils$ReCalc.isNumKey("8"),
                                                /* :: */[
                                                  Utils$ReCalc.isNumKey("9"),
                                                  /* [] */0
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]), /* :: */[
                            true,
                            /* :: */[
                              true,
                              /* :: */[
                                true,
                                /* :: */[
                                  true,
                                  /* :: */[
                                    true,
                                    /* :: */[
                                      true,
                                      /* :: */[
                                        true,
                                        /* :: */[
                                          true,
                                          /* :: */[
                                            true,
                                            /* :: */[
                                              true,
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]);
              }));
        return Jest.test("it should return false when not given a number", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](/* :: */[
                                      Utils$ReCalc.isNumKey("f"),
                                      /* :: */[
                                        Utils$ReCalc.isNumKey("*"),
                                        /* [] */0
                                      ]
                                    ]), /* :: */[
                                  false,
                                  /* :: */[
                                    false,
                                    /* [] */0
                                  ]
                                ]);
                    }));
      }));

Jest.describe("isOpKey", (function (param) {
        Jest.test("it should return true when an operator key is entered", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](/* :: */[
                                Utils$ReCalc.isOpKey("+"),
                                /* :: */[
                                  Utils$ReCalc.isOpKey("-"),
                                  /* :: */[
                                    Utils$ReCalc.isOpKey("*"),
                                    /* :: */[
                                      Utils$ReCalc.isOpKey("/"),
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]), /* :: */[
                            true,
                            /* :: */[
                              true,
                              /* :: */[
                                true,
                                /* :: */[
                                  true,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]);
              }));
        return Jest.test("it should return false when anything besides an operator key is passing in", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](/* :: */[
                                      Utils$ReCalc.isOpKey("1"),
                                      /* :: */[
                                        Utils$ReCalc.isOpKey("f"),
                                        /* [] */0
                                      ]
                                    ]), /* :: */[
                                  false,
                                  /* :: */[
                                    false,
                                    /* [] */0
                                  ]
                                ]);
                    }));
      }));

Jest.describe("getLastNum", (function (param) {
        Jest.test("it returns an empty string when", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Utils$ReCalc.getLastNum("")), "");
              }));
        Jest.test("it should return the last number", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Utils$ReCalc.getLastNum("10+2")), "2");
              }));
        return Jest.test("it should return empty string when not digit", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Utils$ReCalc.getLastNum("abc+def")), "");
                    }));
      }));

Jest.describe("lastGroupIsOpKey", (function (param) {
        Jest.test("it should return true when the last grouping is an operator", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Utils$ReCalc.lastGroupIsOpKey("1+2*")), true);
              }));
        return Jest.test("it should return false when the last group is not an operator", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](Utils$ReCalc.lastGroupIsOpKey("1+2*4")), false);
                    }));
      }));

/*  Not a pure module */
