// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CalcRegex$ReCalc = require("../src/CalcRegex.bs.js");

Jest.describe("CalcRegex", (function (param) {
        Jest.test("it should match a plus sign", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.operators.test("2+3")), true);
              }));
        Jest.test("it should match a minus sign", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.operators.test("2-3")), true);
              }));
        Jest.test("it should match a multiplication sign", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.operators.test("2*3")), true);
              }));
        Jest.test("it should match a division sign", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.operators.test("2/3")), true);
              }));
        Jest.test("it should match if any/all are present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.operators.test("2+3*1-1/2")), true);
              }));
        Jest.test("finds first multiplication", (function (param) {
                var param$1 = "1+2*3".match(CalcRegex$ReCalc.first_mult_or_div_group);
                var res = param$1 !== null ? $$Array.sub(param$1, 1, 3) : /* array */[];
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](res), /* array */[
                            "2",
                            "*",
                            "3"
                          ]);
              }));
        Jest.test("finds first division", (function (param) {
                var param$1 = "1+2/3".match(CalcRegex$ReCalc.first_mult_or_div_group);
                var res = param$1 !== null ? $$Array.sub(param$1, 1, 3) : /* array */[];
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](res), /* array */[
                            "2",
                            "/",
                            "3"
                          ]);
              }));
        Jest.test("finds first addition", (function (param) {
                var param$1 = "1*2+3".match(CalcRegex$ReCalc.first_add_or_sub_group);
                var res = param$1 !== null ? $$Array.sub(param$1, 1, 3) : /* array */[];
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](res), /* array */[
                            "2",
                            "+",
                            "3"
                          ]);
              }));
        Jest.test("finds first subtraction", (function (param) {
                var param$1 = "1*2-3".match(CalcRegex$ReCalc.first_add_or_sub_group);
                var res = param$1 !== null ? $$Array.sub(param$1, 1, 3) : /* array */[];
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](res), /* array */[
                            "2",
                            "-",
                            "3"
                          ]);
              }));
        Jest.test("it should return true when * is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.mult_or_div.test("2*3")), true);
              }));
        Jest.test("it should return true when / is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.mult_or_div.test("2/3")), true);
              }));
        Jest.test("it should return false when * and / are not present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.mult_or_div.test("2+3")), false);
              }));
        Jest.test("it should return true when + is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.add_or_sub.test("2+3")), true);
              }));
        Jest.test("it should return true when - is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.add_or_sub.test("2-3")), true);
              }));
        Jest.test("it should return false when - and + are not present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.add_or_sub.test("2*3")), false);
              }));
        Jest.test("it should return true when number precedes . in floating point number", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.has_number.test("3.01")), true);
              }));
        Jest.test("it should return true when no number precedes . in floating point\n       number", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.has_number.test(".01")), true);
              }));
        Jest.test("it should return true when no . is present", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcRegex$ReCalc.has_number.test("103")), true);
              }));
        return Jest.test("it should return true when devided by zero", (function (param) {
                      var param$1 = "12/0".match(CalcRegex$ReCalc.division_group);
                      var results = param$1 !== null ? param$1 : /* array */[];
                      var n2 = Caml_format.caml_float_of_string(Caml_array.caml_array_get(results, 3));
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](n2), 0.0);
                    }));
      }));

/*  Not a pure module */
