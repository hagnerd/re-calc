// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var CalcMath$ReCalc = require("../src/CalcMath.bs.js");

Jest.describe("operate_f", (function (param) {
        Jest.test("it should calculate correctly", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](/* :: */[
                                CalcMath$ReCalc.operate_f("+", 1, 3),
                                /* :: */[
                                  CalcMath$ReCalc.operate_f("*", 2, 3),
                                  /* :: */[
                                    CalcMath$ReCalc.operate_f("/", 10, 2),
                                    /* [] */0
                                  ]
                                ]
                              ]), /* :: */[
                            /* Ok */Block.__(0, [4.0]),
                            /* :: */[
                              /* Ok */Block.__(0, [6.0]),
                              /* :: */[
                                /* Ok */Block.__(0, [5]),
                                /* [] */0
                              ]
                            ]
                          ]);
              }));
        return Jest.test("it should work with decimals", (function (param) {
                      var param$1 = CalcMath$ReCalc.operate_f("+", 0.1, 0.02);
                      if (param$1.tag) {
                        return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](param$1[0]), "cool");
                      } else {
                        return Jest.Expect[/* toBeCloseTo */3](0.12, Jest.Expect[/* expect */0](param$1[0]));
                      }
                    }));
      }));

Jest.describe("calculate", (function (param) {
        Jest.test("it should work with a simple calculation", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcMath$ReCalc.calculate(/* Ok */Block.__(0, ["1+2"]))), /* Ok */Block.__(0, ["3"]));
              }));
        Jest.test("it should work with a complex calculation", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcMath$ReCalc.calculate(/* Ok */Block.__(0, ["1+2*3"]))), /* Ok */Block.__(0, ["7"]));
              }));
        Jest.test("it should work with floating point calculations", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcMath$ReCalc.calculate(/* Ok */Block.__(0, ["1.2*3/1.25"]))), /* Ok */Block.__(0, ["2.88"]));
              }));
        return Jest.test("blah", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* = */5], Jest.Expect[/* expect */0](CalcMath$ReCalc.calculate(/* Ok */Block.__(0, ["0.1+1.2345"]))), /* Ok */Block.__(0, ["1.3345"]));
                    }));
      }));

/*  Not a pure module */
